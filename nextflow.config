nextflow.enable.dsl=2

// contains params for software executed by nf processes
params {

    // GENERAL LOGIC
    notification = false

    /*
    define different run modes:
    full: run full pipeline
    test: run integration test directly via nf, not pytest or CI

    qc: do only qc of samples
    prepare: to prepare the reads
    ribotish: run ribotish
    proteomics: quantify mzML file

    For each mode, the right files have to be provided:
    
    Mode "full" requires:
    nextflow run main.nf \
        -profile full,<slurm,slurm_offline,docker>
    
    nextflow run main.nf \
        -profile test,<slurm,slurm_offline,docker>

    nextflow run main.nf \
        -profile qc,<slurm,slurm_offline,docker>

    nextflow run main.nf \
        -profile prepare,<slurm,slurm_offline,docker>

    nextflow run main.nf \
        -profile ribotish,<slurm,slurm_offline,docker>

    nextflow run main.nf \
        -profile genome_map,<slurm_slurm_offline,docker>

    Mode "proteomics" requires:
    nextflow run main.nf \
        -profile proteomics,slurm_offline \
        --test_database "path/to/fasta file of predicted peptides" \
        --proteomics_reads "path/to/mzML files"

    */

    // COUNT_OLIGOS
    run_count_oligos = false

    // PULL_CONTAINERS
    slurm_config = "${projectDir}/conf/slurm.config"
    pull_containers_file = "${projectDir}/data/scripts/pull_containers.py"
	singularity_store = "${HOME}/.singularity/cache/library"

    // CHECK_FILES_PIPE
    check_files_script = "${projectDir}/data/scripts/check_files.py"

    // ANNOTATE_PIPE
	lct_script = "${projectDir}/data/scripts/find_longest_coding_transcripts.py"
    ctdCDS_script = "${projectDir}/data/scripts/create_tab_delimited_CDS_file.py"

    // RIBOSEQ_PIPE
    count_oligos_script = "${projectDir}/data/scripts/count_oligos.py"
    find_overrepresented_sequences_script = "${projectDir}/data/scripts/find_overrepresented_sequences.py"
    plot_read_lengths_script = "${projectDir}/data/scripts/plot_read_lengths.py"
    determine_p_site_offsets_script = "${projectDir}/data/scripts/determine_p_site_offsets.py"
    count_reads_script = "${projectDir}/data/scripts/count_reads.py"
    check_periodicity_script = "${projectDir}/data/scripts/check_periodicity.py"
    filter_lengths_offsets_script = "${projectDir}/data/scripts/filter_reads_based_on_read_lengths_and_offsets.py"

    // TRIM_FIRST_BASES
    cut = 5
    minimum_length = 20

    // CLIP_READS
	clip_reads_args = "-v -n -l 20 -c -z -a AAAAAAAAAA"

    // TRIM_READS
	trim_reads_args = "-v -l 20 -t 20 -Q 33 -z"

    // FILTER_READS
	filter_reads_args = "-v -q 20 -p 90 -z -Q 33"

    // FASTQ_TO_FASTA
    fastq_to_fasta_args = "-v -n -r"

    // segemehl mapping
	segemehl_args = "--silent --accuracy 90 --threads 25"

	// star mapping
	star_map_threads = 24

    // CHECK_PERIODICITY
    check_peridocitiy_codnum = 100
   
    // RIBOTISH_PIPE
    riboseq_mode = "regular" // or "TI"
    ribotish_quality_th = 0.4
    ribotish_predict_mode = "--longest" // or ""
	sorf_peptide_script = "${projectDir}/data/scripts/find_sorf_peptide.py"

    // PHILOSOPHER_PIPE
	workspace = "${projectDir}/workspace"
    change_params_script = "${projectDir}/data/scripts/change_file.py"
    bam_sort_index_folder = "${projectDir}/data/.."
    peptideprophet_args = "--combine --decoy rev_ --ppm --accmass --expectscore --decoyprobs --nonparam"
    philosopher_filter_args = "--psm 0.05 --ion 0.05 --pep 0.05 --prot 1 --picked --tag rev_"

}

// notification about result of pipeline via email
if ( params.notification == "true" ) {
	notification {
		enabled = true
		to = "pozzan.noe@gmail.com"
		from = "pozzan.noe@gmail.com"
	}
}

// profiles are used to neatly manage config params
profiles {

    slurm {
        includeConfig "conf/slurm.config"
    }

	slurm_offline {
        includeConfig "conf/slurm_offline.config"
    }

	pull {
       includeConfig "conf/pull.config"
    }

	docker {
        includeConfig "conf/docker.config"
    }
	
	full {
        includeConfig "conf/full.config"
    }

	test {
        includeConfig "conf/test.config"
    }

	proteomics {
        includeConfig "conf/proteomics.config"
    }

    ribotish {
        includeConfig "conf/ribotish.config"
    }

    cluster {
		includeConfig "conf/cluster.config"
    }

	cluster_offline {
		includeConfig "conf/cluster_offline.config"
	}

    pull {
        includeConfig "conf/pull.config"
    }
    
    pull_cluster {
        includeConfig "conf/pull_cluster.config"
    }

    genome_map {
        includeConfig "conf/genome_map.config"
    }

}

